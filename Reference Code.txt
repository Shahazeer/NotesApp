app.get("/Notes", (req, res) => {
  const noteNo = req.query.p || 0;

  let users = [];
  db.collection("Users")
    .find()
    .sort({ name: 1 })
    .forEach((user) => users.push(user))
    .then(() => {
      res.status(200).json(users);
    })
    .catch(() => {
      res.status(500).json({ error: "Could not find documents" });
    });
});

app.get("/Notes/:id", (req, res) => {
  if (ObjectId.isValid(req.params.id)) {
    db.collection("Users")
      .findOne({ _id: new ObjectId(req.params.id) })
      .then((doc) => {
        res.status(200).json(doc);
      })
      .catch((err) => {
        res.status(500).json({ error: "Could not find documents" });
      });
  } else {
    res.status(500).json({ error: "Invalid document ID" });
  }
});

app.post("/Notes", (req, res) => {
  const note = req.body;

  db.collection("Users")
    .insertMany(note)
    .then((result) => {
      res.status(201).json(result);
    })
    .catch((err) => {
      res.status(500).json({ error: "Couldn't create a new document" });
    });
});

app.delete("/Notes/:id", (req, res) => {
  if (ObjectId.isValid) {
    db.collection("Users")
      .deleteOne({ _id: new ObjectId(req.params.id) })
      .then((result) => {
        res.status(200).json(result);
      })
      .catch((err) => {
        res.status(500).json({ error: "Could not find documents" });
      });
  } else {
    res.status(500).json({ error: "Invalid document ID" });
  }
});

app.patch("/Notes/:id", (req, res) => {
  const update = req.body;
  if (ObjectId.isValid) {
    db.collection("Users")
      .updateOne({ _id: new ObjectId(req.params.id) }, { $set: update })
      .then((result) => {
        res.status(200).json(result);
      })
      .catch((err) => {
        res.status(500).json({ error: "Now a valid document ID" });
      });
  } else {
    res.status(500).json({ error: "Invalid document ID" });
  }
});



